// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAccountRoles(t *testing.T) {
	t.Parallel()

	query := AccountRoles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAccountRolesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountRolesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AccountRoles().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountRolesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccountRoleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountRolesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountRolesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AccountRoles().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountRolesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccountRoleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountRolesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AccountRoleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AccountRole exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AccountRoleExists to return true, but got false.")
	}
}

func testAccountRolesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	accountRoleFound, err := FindAccountRole(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if accountRoleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAccountRolesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AccountRoles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAccountRolesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AccountRoles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAccountRolesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountRoleOne := &AccountRole{}
	accountRoleTwo := &AccountRole{}
	if err = randomize.Struct(seed, accountRoleOne, accountRoleDBTypes, false, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}
	if err = randomize.Struct(seed, accountRoleTwo, accountRoleDBTypes, false, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = accountRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = accountRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AccountRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAccountRolesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	accountRoleOne := &AccountRole{}
	accountRoleTwo := &AccountRole{}
	if err = randomize.Struct(seed, accountRoleOne, accountRoleDBTypes, false, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}
	if err = randomize.Struct(seed, accountRoleTwo, accountRoleDBTypes, false, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = accountRoleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = accountRoleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func accountRoleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AccountRole) error {
	*o = AccountRole{}
	return nil
}

func accountRoleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AccountRole) error {
	*o = AccountRole{}
	return nil
}

func accountRoleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AccountRole) error {
	*o = AccountRole{}
	return nil
}

func accountRoleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AccountRole) error {
	*o = AccountRole{}
	return nil
}

func accountRoleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AccountRole) error {
	*o = AccountRole{}
	return nil
}

func accountRoleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AccountRole) error {
	*o = AccountRole{}
	return nil
}

func accountRoleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AccountRole) error {
	*o = AccountRole{}
	return nil
}

func accountRoleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AccountRole) error {
	*o = AccountRole{}
	return nil
}

func accountRoleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AccountRole) error {
	*o = AccountRole{}
	return nil
}

func testAccountRolesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AccountRole{}
	o := &AccountRole{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, accountRoleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AccountRole object: %s", err)
	}

	AddAccountRoleHook(boil.BeforeInsertHook, accountRoleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	accountRoleBeforeInsertHooks = []AccountRoleHook{}

	AddAccountRoleHook(boil.AfterInsertHook, accountRoleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	accountRoleAfterInsertHooks = []AccountRoleHook{}

	AddAccountRoleHook(boil.AfterSelectHook, accountRoleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	accountRoleAfterSelectHooks = []AccountRoleHook{}

	AddAccountRoleHook(boil.BeforeUpdateHook, accountRoleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	accountRoleBeforeUpdateHooks = []AccountRoleHook{}

	AddAccountRoleHook(boil.AfterUpdateHook, accountRoleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	accountRoleAfterUpdateHooks = []AccountRoleHook{}

	AddAccountRoleHook(boil.BeforeDeleteHook, accountRoleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	accountRoleBeforeDeleteHooks = []AccountRoleHook{}

	AddAccountRoleHook(boil.AfterDeleteHook, accountRoleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	accountRoleAfterDeleteHooks = []AccountRoleHook{}

	AddAccountRoleHook(boil.BeforeUpsertHook, accountRoleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	accountRoleBeforeUpsertHooks = []AccountRoleHook{}

	AddAccountRoleHook(boil.AfterUpsertHook, accountRoleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	accountRoleAfterUpsertHooks = []AccountRoleHook{}
}

func testAccountRolesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccountRolesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(accountRoleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccountRoleToOneAccountUsingAccount(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AccountRole
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, accountRoleDBTypes, false, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AccountID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Account().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddAccountHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Account) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AccountRoleSlice{&local}
	if err = local.L.LoadAccount(ctx, tx, false, (*[]*AccountRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Account = nil
	if err = local.L.LoadAccount(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAccountRoleToOneRoleUsingRole(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local AccountRole
	var foreign Role

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, accountRoleDBTypes, false, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleDBTypes, false, roleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Role struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RoleID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Role().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddRoleHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Role) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := AccountRoleSlice{&local}
	if err = local.L.LoadRole(ctx, tx, false, (*[]*AccountRole)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Role = nil
	if err = local.L.LoadRole(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testAccountRoleToOneSetOpAccountUsingAccount(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AccountRole
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, accountRoleDBTypes, false, strmangle.SetComplement(accountRolePrimaryKeyColumns, accountRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetAccount(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Account != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AccountRoles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AccountID != x.ID {
			t.Error("foreign key was wrong value", a.AccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AccountID))
		reflect.Indirect(reflect.ValueOf(&a.AccountID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AccountID != x.ID {
			t.Error("foreign key was wrong value", a.AccountID, x.ID)
		}
	}
}
func testAccountRoleToOneSetOpRoleUsingRole(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a AccountRole
	var b, c Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, accountRoleDBTypes, false, strmangle.SetComplement(accountRolePrimaryKeyColumns, accountRoleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Role{&b, &c} {
		err = a.SetRole(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Role != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AccountRoles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoleID != x.ID {
			t.Error("foreign key was wrong value", a.RoleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoleID))
		reflect.Indirect(reflect.ValueOf(&a.RoleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RoleID != x.ID {
			t.Error("foreign key was wrong value", a.RoleID, x.ID)
		}
	}
}

func testAccountRolesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAccountRolesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccountRoleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAccountRolesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AccountRoles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	accountRoleDBTypes = map[string]string{`ID`: `integer`, `AccountID`: `integer`, `RoleID`: `integer`, `CreatedBy`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedBy`: `integer`, `UpdatedAt`: `timestamp with time zone`, `DeletedBy`: `integer`, `DeletedAt`: `timestamp with time zone`}
	_                  = bytes.MinRead
)

func testAccountRolesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(accountRolePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(accountRoleAllColumns) == len(accountRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAccountRolesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(accountRoleAllColumns) == len(accountRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AccountRole{}
	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRoleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, accountRoleDBTypes, true, accountRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(accountRoleAllColumns, accountRolePrimaryKeyColumns) {
		fields = accountRoleAllColumns
	} else {
		fields = strmangle.SetComplement(
			accountRoleAllColumns,
			accountRolePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AccountRoleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAccountRolesUpsert(t *testing.T) {
	t.Parallel()

	if len(accountRoleAllColumns) == len(accountRolePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AccountRole{}
	if err = randomize.Struct(seed, &o, accountRoleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AccountRole: %s", err)
	}

	count, err := AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, accountRoleDBTypes, false, accountRolePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountRole struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AccountRole: %s", err)
	}

	count, err = AccountRoles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
