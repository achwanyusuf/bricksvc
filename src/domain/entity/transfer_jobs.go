// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// TransferJob is an object representing the database table.
type TransferJob struct {
	ID        int            `boil:"id" json:"id" toml:"id" yaml:"id"`
	JobID     string         `boil:"job_id" json:"job_id" toml:"job_id" yaml:"job_id"`
	APIKey    string         `boil:"api_key" json:"api_key" toml:"api_key" yaml:"api_key"`
	Payload   types.JSON     `boil:"payload" json:"payload" toml:"payload" yaml:"payload"`
	Status    Transferstatus `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedBy int            `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CreatedAt time.Time      `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedBy int            `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	UpdatedAt time.Time      `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedBy null.Int       `boil:"deleted_by" json:"deleted_by,omitempty" toml:"deleted_by" yaml:"deleted_by,omitempty"`
	DeletedAt null.Time      `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *transferJobR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transferJobL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransferJobColumns = struct {
	ID        string
	JobID     string
	APIKey    string
	Payload   string
	Status    string
	CreatedBy string
	CreatedAt string
	UpdatedBy string
	UpdatedAt string
	DeletedBy string
	DeletedAt string
}{
	ID:        "id",
	JobID:     "job_id",
	APIKey:    "api_key",
	Payload:   "payload",
	Status:    "status",
	CreatedBy: "created_by",
	CreatedAt: "created_at",
	UpdatedBy: "updated_by",
	UpdatedAt: "updated_at",
	DeletedBy: "deleted_by",
	DeletedAt: "deleted_at",
}

var TransferJobTableColumns = struct {
	ID        string
	JobID     string
	APIKey    string
	Payload   string
	Status    string
	CreatedBy string
	CreatedAt string
	UpdatedBy string
	UpdatedAt string
	DeletedBy string
	DeletedAt string
}{
	ID:        "transfer_jobs.id",
	JobID:     "transfer_jobs.job_id",
	APIKey:    "transfer_jobs.api_key",
	Payload:   "transfer_jobs.payload",
	Status:    "transfer_jobs.status",
	CreatedBy: "transfer_jobs.created_by",
	CreatedAt: "transfer_jobs.created_at",
	UpdatedBy: "transfer_jobs.updated_by",
	UpdatedAt: "transfer_jobs.updated_at",
	DeletedBy: "transfer_jobs.deleted_by",
	DeletedAt: "transfer_jobs.deleted_at",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperTransferstatus struct{ field string }

func (w whereHelperTransferstatus) EQ(x Transferstatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperTransferstatus) NEQ(x Transferstatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperTransferstatus) LT(x Transferstatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperTransferstatus) LTE(x Transferstatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperTransferstatus) GT(x Transferstatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperTransferstatus) GTE(x Transferstatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperTransferstatus) IN(slice []Transferstatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperTransferstatus) NIN(slice []Transferstatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var TransferJobWhere = struct {
	ID        whereHelperint
	JobID     whereHelperstring
	APIKey    whereHelperstring
	Payload   whereHelpertypes_JSON
	Status    whereHelperTransferstatus
	CreatedBy whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedBy whereHelperint
	UpdatedAt whereHelpertime_Time
	DeletedBy whereHelpernull_Int
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"transfer_jobs\".\"id\""},
	JobID:     whereHelperstring{field: "\"transfer_jobs\".\"job_id\""},
	APIKey:    whereHelperstring{field: "\"transfer_jobs\".\"api_key\""},
	Payload:   whereHelpertypes_JSON{field: "\"transfer_jobs\".\"payload\""},
	Status:    whereHelperTransferstatus{field: "\"transfer_jobs\".\"status\""},
	CreatedBy: whereHelperint{field: "\"transfer_jobs\".\"created_by\""},
	CreatedAt: whereHelpertime_Time{field: "\"transfer_jobs\".\"created_at\""},
	UpdatedBy: whereHelperint{field: "\"transfer_jobs\".\"updated_by\""},
	UpdatedAt: whereHelpertime_Time{field: "\"transfer_jobs\".\"updated_at\""},
	DeletedBy: whereHelpernull_Int{field: "\"transfer_jobs\".\"deleted_by\""},
	DeletedAt: whereHelpernull_Time{field: "\"transfer_jobs\".\"deleted_at\""},
}

// TransferJobRels is where relationship names are stored.
var TransferJobRels = struct {
}{}

// transferJobR is where relationships are stored.
type transferJobR struct {
}

// NewStruct creates a new relationship struct
func (*transferJobR) NewStruct() *transferJobR {
	return &transferJobR{}
}

// transferJobL is where Load methods for each relationship are stored.
type transferJobL struct{}

var (
	transferJobAllColumns            = []string{"id", "job_id", "api_key", "payload", "status", "created_by", "created_at", "updated_by", "updated_at", "deleted_by", "deleted_at"}
	transferJobColumnsWithoutDefault = []string{"job_id", "api_key", "payload"}
	transferJobColumnsWithDefault    = []string{"id", "status", "created_by", "created_at", "updated_by", "updated_at", "deleted_by", "deleted_at"}
	transferJobPrimaryKeyColumns     = []string{"id"}
	transferJobGeneratedColumns      = []string{}
)

type (
	// TransferJobSlice is an alias for a slice of pointers to TransferJob.
	// This should almost always be used instead of []TransferJob.
	TransferJobSlice []*TransferJob
	// TransferJobHook is the signature for custom TransferJob hook methods
	TransferJobHook func(context.Context, boil.ContextExecutor, *TransferJob) error

	transferJobQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transferJobType                 = reflect.TypeOf(&TransferJob{})
	transferJobMapping              = queries.MakeStructMapping(transferJobType)
	transferJobPrimaryKeyMapping, _ = queries.BindMapping(transferJobType, transferJobMapping, transferJobPrimaryKeyColumns)
	transferJobInsertCacheMut       sync.RWMutex
	transferJobInsertCache          = make(map[string]insertCache)
	transferJobUpdateCacheMut       sync.RWMutex
	transferJobUpdateCache          = make(map[string]updateCache)
	transferJobUpsertCacheMut       sync.RWMutex
	transferJobUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var transferJobAfterSelectMu sync.Mutex
var transferJobAfterSelectHooks []TransferJobHook

var transferJobBeforeInsertMu sync.Mutex
var transferJobBeforeInsertHooks []TransferJobHook
var transferJobAfterInsertMu sync.Mutex
var transferJobAfterInsertHooks []TransferJobHook

var transferJobBeforeUpdateMu sync.Mutex
var transferJobBeforeUpdateHooks []TransferJobHook
var transferJobAfterUpdateMu sync.Mutex
var transferJobAfterUpdateHooks []TransferJobHook

var transferJobBeforeDeleteMu sync.Mutex
var transferJobBeforeDeleteHooks []TransferJobHook
var transferJobAfterDeleteMu sync.Mutex
var transferJobAfterDeleteHooks []TransferJobHook

var transferJobBeforeUpsertMu sync.Mutex
var transferJobBeforeUpsertHooks []TransferJobHook
var transferJobAfterUpsertMu sync.Mutex
var transferJobAfterUpsertHooks []TransferJobHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TransferJob) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferJobAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TransferJob) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferJobBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TransferJob) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferJobAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TransferJob) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferJobBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TransferJob) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferJobAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TransferJob) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferJobBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TransferJob) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferJobAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TransferJob) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferJobBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TransferJob) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range transferJobAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransferJobHook registers your hook function for all future operations.
func AddTransferJobHook(hookPoint boil.HookPoint, transferJobHook TransferJobHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		transferJobAfterSelectMu.Lock()
		transferJobAfterSelectHooks = append(transferJobAfterSelectHooks, transferJobHook)
		transferJobAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		transferJobBeforeInsertMu.Lock()
		transferJobBeforeInsertHooks = append(transferJobBeforeInsertHooks, transferJobHook)
		transferJobBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		transferJobAfterInsertMu.Lock()
		transferJobAfterInsertHooks = append(transferJobAfterInsertHooks, transferJobHook)
		transferJobAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		transferJobBeforeUpdateMu.Lock()
		transferJobBeforeUpdateHooks = append(transferJobBeforeUpdateHooks, transferJobHook)
		transferJobBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		transferJobAfterUpdateMu.Lock()
		transferJobAfterUpdateHooks = append(transferJobAfterUpdateHooks, transferJobHook)
		transferJobAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		transferJobBeforeDeleteMu.Lock()
		transferJobBeforeDeleteHooks = append(transferJobBeforeDeleteHooks, transferJobHook)
		transferJobBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		transferJobAfterDeleteMu.Lock()
		transferJobAfterDeleteHooks = append(transferJobAfterDeleteHooks, transferJobHook)
		transferJobAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		transferJobBeforeUpsertMu.Lock()
		transferJobBeforeUpsertHooks = append(transferJobBeforeUpsertHooks, transferJobHook)
		transferJobBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		transferJobAfterUpsertMu.Lock()
		transferJobAfterUpsertHooks = append(transferJobAfterUpsertHooks, transferJobHook)
		transferJobAfterUpsertMu.Unlock()
	}
}

// OneG returns a single transferJob record from the query using the global executor.
func (q transferJobQuery) OneG(ctx context.Context) (*TransferJob, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single transferJob record from the query.
func (q transferJobQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TransferJob, error) {
	o := &TransferJob{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: failed to execute a one query for transfer_jobs")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all TransferJob records from the query using the global executor.
func (q transferJobQuery) AllG(ctx context.Context) (TransferJobSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all TransferJob records from the query.
func (q transferJobQuery) All(ctx context.Context, exec boil.ContextExecutor) (TransferJobSlice, error) {
	var o []*TransferJob

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entity: failed to assign all query results to TransferJob slice")
	}

	if len(transferJobAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all TransferJob records in the query using the global executor
func (q transferJobQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all TransferJob records in the query.
func (q transferJobQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to count transfer_jobs rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q transferJobQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q transferJobQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entity: failed to check if transfer_jobs exists")
	}

	return count > 0, nil
}

// TransferJobs retrieves all the records using an executor.
func TransferJobs(mods ...qm.QueryMod) transferJobQuery {
	mods = append(mods, qm.From("\"transfer_jobs\""), qmhelper.WhereIsNull("\"transfer_jobs\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"transfer_jobs\".*"})
	}

	return transferJobQuery{q}
}

// FindTransferJobG retrieves a single record by ID.
func FindTransferJobG(ctx context.Context, iD int, selectCols ...string) (*TransferJob, error) {
	return FindTransferJob(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindTransferJob retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransferJob(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*TransferJob, error) {
	transferJobObj := &TransferJob{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transfer_jobs\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, transferJobObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entity: unable to select from transfer_jobs")
	}

	if err = transferJobObj.doAfterSelectHooks(ctx, exec); err != nil {
		return transferJobObj, err
	}

	return transferJobObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TransferJob) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransferJob) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entity: no transfer_jobs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transferJobColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transferJobInsertCacheMut.RLock()
	cache, cached := transferJobInsertCache[key]
	transferJobInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transferJobAllColumns,
			transferJobColumnsWithDefault,
			transferJobColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transferJobType, transferJobMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transferJobType, transferJobMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transfer_jobs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transfer_jobs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "entity: unable to insert into transfer_jobs")
	}

	if !cached {
		transferJobInsertCacheMut.Lock()
		transferJobInsertCache[key] = cache
		transferJobInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single TransferJob record using the global executor.
// See Update for more documentation.
func (o *TransferJob) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the TransferJob.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransferJob) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transferJobUpdateCacheMut.RLock()
	cache, cached := transferJobUpdateCache[key]
	transferJobUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transferJobAllColumns,
			transferJobPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entity: unable to update transfer_jobs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transfer_jobs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transferJobPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transferJobType, transferJobMapping, append(wl, transferJobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update transfer_jobs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by update for transfer_jobs")
	}

	if !cached {
		transferJobUpdateCacheMut.Lock()
		transferJobUpdateCache[key] = cache
		transferJobUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q transferJobQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q transferJobQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all for transfer_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected for transfer_jobs")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TransferJobSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransferJobSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entity: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transfer_jobs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transferJobPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to update all in transferJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to retrieve rows affected all in update all transferJob")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TransferJob) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransferJob) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("entity: no transfer_jobs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transferJobColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transferJobUpsertCacheMut.RLock()
	cache, cached := transferJobUpsertCache[key]
	transferJobUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			transferJobAllColumns,
			transferJobColumnsWithDefault,
			transferJobColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			transferJobAllColumns,
			transferJobPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("entity: unable to upsert transfer_jobs, could not build update column list")
		}

		ret := strmangle.SetComplement(transferJobAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(transferJobPrimaryKeyColumns) == 0 {
				return errors.New("entity: unable to upsert transfer_jobs, could not build conflict column list")
			}

			conflict = make([]string, len(transferJobPrimaryKeyColumns))
			copy(conflict, transferJobPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transfer_jobs\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(transferJobType, transferJobMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transferJobType, transferJobMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "entity: unable to upsert transfer_jobs")
	}

	if !cached {
		transferJobUpsertCacheMut.Lock()
		transferJobUpsertCache[key] = cache
		transferJobUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single TransferJob record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TransferJob) DeleteG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB(), hardDelete)
}

// Delete deletes a single TransferJob record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransferJob) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("entity: no TransferJob provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transferJobPrimaryKeyMapping)
		sql = "DELETE FROM \"transfer_jobs\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"transfer_jobs\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(transferJobType, transferJobMapping, append(wl, transferJobPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete from transfer_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by delete for transfer_jobs")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q transferJobQuery) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all matching rows.
func (q transferJobQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entity: no transferJobQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from transfer_jobs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for transfer_jobs")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o TransferJobSlice) DeleteAllG(ctx context.Context, hardDelete bool) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB(), hardDelete)
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransferJobSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(transferJobBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferJobPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"transfer_jobs\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transferJobPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferJobPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"transfer_jobs\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, transferJobPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entity: unable to delete all from transferJob slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entity: failed to get rows affected by deleteall for transfer_jobs")
	}

	if len(transferJobAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TransferJob) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("entity: no TransferJob provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransferJob) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTransferJob(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransferJobSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("entity: empty TransferJobSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransferJobSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransferJobSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transferJobPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transfer_jobs\".* FROM \"transfer_jobs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transferJobPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entity: unable to reload all in TransferJobSlice")
	}

	*o = slice

	return nil
}

// TransferJobExistsG checks if the TransferJob row exists.
func TransferJobExistsG(ctx context.Context, iD int) (bool, error) {
	return TransferJobExists(ctx, boil.GetContextDB(), iD)
}

// TransferJobExists checks if the TransferJob row exists.
func TransferJobExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transfer_jobs\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entity: unable to check if transfer_jobs exists")
	}

	return exists, nil
}

// Exists checks if the TransferJob row exists.
func (o *TransferJob) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TransferJobExists(ctx, exec, o.ID)
}
