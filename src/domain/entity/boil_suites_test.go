// Code generated by SQLBoiler 4.16.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entity

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AccountRoles", testAccountRoles)
	t.Run("Accounts", testAccounts)
	t.Run("Roles", testRoles)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("TransferJobs", testTransferJobs)
}

func TestSoftDelete(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesSoftDelete)
	t.Run("Accounts", testAccountsSoftDelete)
	t.Run("Roles", testRolesSoftDelete)
	t.Run("TransferJobs", testTransferJobsSoftDelete)
}

func TestQuerySoftDeleteAll(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesQuerySoftDeleteAll)
	t.Run("Accounts", testAccountsQuerySoftDeleteAll)
	t.Run("Roles", testRolesQuerySoftDeleteAll)
	t.Run("TransferJobs", testTransferJobsQuerySoftDeleteAll)
}

func TestSliceSoftDeleteAll(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesSliceSoftDeleteAll)
	t.Run("Accounts", testAccountsSliceSoftDeleteAll)
	t.Run("Roles", testRolesSliceSoftDeleteAll)
	t.Run("TransferJobs", testTransferJobsSliceSoftDeleteAll)
}

func TestDelete(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesDelete)
	t.Run("Accounts", testAccountsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("TransferJobs", testTransferJobsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesQueryDeleteAll)
	t.Run("Accounts", testAccountsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("TransferJobs", testTransferJobsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesSliceDeleteAll)
	t.Run("Accounts", testAccountsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("TransferJobs", testTransferJobsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesExists)
	t.Run("Accounts", testAccountsExists)
	t.Run("Roles", testRolesExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("TransferJobs", testTransferJobsExists)
}

func TestFind(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesFind)
	t.Run("Accounts", testAccountsFind)
	t.Run("Roles", testRolesFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("TransferJobs", testTransferJobsFind)
}

func TestBind(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesBind)
	t.Run("Accounts", testAccountsBind)
	t.Run("Roles", testRolesBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("TransferJobs", testTransferJobsBind)
}

func TestOne(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesOne)
	t.Run("Accounts", testAccountsOne)
	t.Run("Roles", testRolesOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("TransferJobs", testTransferJobsOne)
}

func TestAll(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesAll)
	t.Run("Accounts", testAccountsAll)
	t.Run("Roles", testRolesAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("TransferJobs", testTransferJobsAll)
}

func TestCount(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesCount)
	t.Run("Accounts", testAccountsCount)
	t.Run("Roles", testRolesCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("TransferJobs", testTransferJobsCount)
}

func TestHooks(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesHooks)
	t.Run("Accounts", testAccountsHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("TransferJobs", testTransferJobsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesInsert)
	t.Run("AccountRoles", testAccountRolesInsertWhitelist)
	t.Run("Accounts", testAccountsInsert)
	t.Run("Accounts", testAccountsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("TransferJobs", testTransferJobsInsert)
	t.Run("TransferJobs", testTransferJobsInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesReload)
	t.Run("Accounts", testAccountsReload)
	t.Run("Roles", testRolesReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("TransferJobs", testTransferJobsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesReloadAll)
	t.Run("Accounts", testAccountsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("TransferJobs", testTransferJobsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesSelect)
	t.Run("Accounts", testAccountsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("TransferJobs", testTransferJobsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesUpdate)
	t.Run("Accounts", testAccountsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("TransferJobs", testTransferJobsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AccountRoles", testAccountRolesSliceUpdateAll)
	t.Run("Accounts", testAccountsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("TransferJobs", testTransferJobsSliceUpdateAll)
}
