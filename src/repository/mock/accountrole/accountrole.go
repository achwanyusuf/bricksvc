// Code generated by MockGen. DO NOT EDIT.
// Source: src/repository/accountrole/accountrole.go

// Package mock_accountrole is a generated GoMock package.
package mock_accountrole

import (
	context "context"
	reflect "reflect"

	entity "github.com/achwanyusuf/bricksvc/src/domain/entity"
	model "github.com/achwanyusuf/bricksvc/src/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAccountRoleInterface is a mock of AccountRoleInterface interface.
type MockAccountRoleInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRoleInterfaceMockRecorder
}

// MockAccountRoleInterfaceMockRecorder is the mock recorder for MockAccountRoleInterface.
type MockAccountRoleInterfaceMockRecorder struct {
	mock *MockAccountRoleInterface
}

// NewMockAccountRoleInterface creates a new mock instance.
func NewMockAccountRoleInterface(ctrl *gomock.Controller) *MockAccountRoleInterface {
	mock := &MockAccountRoleInterface{ctrl: ctrl}
	mock.recorder = &MockAccountRoleInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRoleInterface) EXPECT() *MockAccountRoleInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAccountRoleInterface) Delete(ctx context.Context, AccountRole *entity.AccountRole, id int64, isHardDelete bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, AccountRole, id, isHardDelete)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountRoleInterfaceMockRecorder) Delete(ctx, AccountRole, id, isHardDelete interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountRoleInterface)(nil).Delete), ctx, AccountRole, id, isHardDelete)
}

// GetByParam mocks base method.
func (m *MockAccountRoleInterface) GetByParam(ctx context.Context, cacheControl string, param *model.GetAccountRolesByParam) (entity.AccountRoleSlice, model.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParam", ctx, cacheControl, param)
	ret0, _ := ret[0].(entity.AccountRoleSlice)
	ret1, _ := ret[1].(model.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByParam indicates an expected call of GetByParam.
func (mr *MockAccountRoleInterfaceMockRecorder) GetByParam(ctx, cacheControl, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParam", reflect.TypeOf((*MockAccountRoleInterface)(nil).GetByParam), ctx, cacheControl, param)
}

// GetSingleByParam mocks base method.
func (m *MockAccountRoleInterface) GetSingleByParam(ctx context.Context, cacheControl string, param *model.GetAccountRoleByParam) (entity.AccountRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingleByParam", ctx, cacheControl, param)
	ret0, _ := ret[0].(entity.AccountRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingleByParam indicates an expected call of GetSingleByParam.
func (mr *MockAccountRoleInterfaceMockRecorder) GetSingleByParam(ctx, cacheControl, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleByParam", reflect.TypeOf((*MockAccountRoleInterface)(nil).GetSingleByParam), ctx, cacheControl, param)
}

// Insert mocks base method.
func (m *MockAccountRoleInterface) Insert(ctx context.Context, data *entity.AccountRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockAccountRoleInterfaceMockRecorder) Insert(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAccountRoleInterface)(nil).Insert), ctx, data)
}

// Update mocks base method.
func (m *MockAccountRoleInterface) Update(ctx context.Context, AccountRole *entity.AccountRole) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, AccountRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAccountRoleInterfaceMockRecorder) Update(ctx, AccountRole interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountRoleInterface)(nil).Update), ctx, AccountRole)
}
