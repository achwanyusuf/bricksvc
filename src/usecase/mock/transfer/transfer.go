// Code generated by MockGen. DO NOT EDIT.
// Source: src/usecase/transfer/transfer.go

// Package mock_transfer is a generated GoMock package.
package mock_transfer

import (
	context "context"
	reflect "reflect"

	model "github.com/achwanyusuf/bricksvc/src/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTransferInterface is a mock of TransferInterface interface.
type MockTransferInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTransferInterfaceMockRecorder
}

// MockTransferInterfaceMockRecorder is the mock recorder for MockTransferInterface.
type MockTransferInterfaceMockRecorder struct {
	mock *MockTransferInterface
}

// NewMockTransferInterface creates a new mock instance.
func NewMockTransferInterface(ctrl *gomock.Controller) *MockTransferInterface {
	mock := &MockTransferInterface{ctrl: ctrl}
	mock.recorder = &MockTransferInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferInterface) EXPECT() *MockTransferInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransferInterface) Create(ctx context.Context, key string, v model.CreateTransfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, key, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransferInterfaceMockRecorder) Create(ctx, key, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransferInterface)(nil).Create), ctx, key, v)
}

// GetByJobID mocks base method.
func (m *MockTransferInterface) GetByJobID(ctx context.Context, cacheControl, id string) (model.TransferJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByJobID", ctx, cacheControl, id)
	ret0, _ := ret[0].(model.TransferJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByJobID indicates an expected call of GetByJobID.
func (mr *MockTransferInterfaceMockRecorder) GetByJobID(ctx, cacheControl, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByJobID", reflect.TypeOf((*MockTransferInterface)(nil).GetByJobID), ctx, cacheControl, id)
}

// GetByParam mocks base method.
func (m *MockTransferInterface) GetByParam(ctx context.Context, cacheControl string, v model.GetTransferJobsByParam) ([]model.TransferJob, model.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParam", ctx, cacheControl, v)
	ret0, _ := ret[0].([]model.TransferJob)
	ret1, _ := ret[1].(model.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByParam indicates an expected call of GetByParam.
func (mr *MockTransferInterfaceMockRecorder) GetByParam(ctx, cacheControl, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParam", reflect.TypeOf((*MockTransferInterface)(nil).GetByParam), ctx, cacheControl, v)
}

// ProccessGetCallback mocks base method.
func (m *MockTransferInterface) ProccessGetCallback(ctx context.Context, param *model.GetTransferJobsByParam) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProccessGetCallback", ctx, param)
}

// ProccessGetCallback indicates an expected call of ProccessGetCallback.
func (mr *MockTransferInterfaceMockRecorder) ProccessGetCallback(ctx, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProccessGetCallback", reflect.TypeOf((*MockTransferInterface)(nil).ProccessGetCallback), ctx, param)
}

// Transfer mocks base method.
func (m *MockTransferInterface) Transfer(ctx context.Context, v model.CreateTransfer, apikey string) (model.TransferJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, v, apikey)
	ret0, _ := ret[0].(model.TransferJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockTransferInterfaceMockRecorder) Transfer(ctx, v, apikey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockTransferInterface)(nil).Transfer), ctx, v, apikey)
}
