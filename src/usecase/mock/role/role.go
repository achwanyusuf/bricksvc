// Code generated by MockGen. DO NOT EDIT.
// Source: src/usecase/role/role.go

// Package mock_role is a generated GoMock package.
package mock_role

import (
	context "context"
	reflect "reflect"

	model "github.com/achwanyusuf/bricksvc/src/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRoleInterface is a mock of RoleInterface interface.
type MockRoleInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRoleInterfaceMockRecorder
}

// MockRoleInterfaceMockRecorder is the mock recorder for MockRoleInterface.
type MockRoleInterfaceMockRecorder struct {
	mock *MockRoleInterface
}

// NewMockRoleInterface creates a new mock instance.
func NewMockRoleInterface(ctrl *gomock.Controller) *MockRoleInterface {
	mock := &MockRoleInterface{ctrl: ctrl}
	mock.recorder = &MockRoleInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleInterface) EXPECT() *MockRoleInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoleInterface) Create(ctx context.Context, v model.CreateRole) (model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, v)
	ret0, _ := ret[0].(model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoleInterfaceMockRecorder) Create(ctx, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleInterface)(nil).Create), ctx, v)
}

// DeleteByID mocks base method.
func (m *MockRoleInterface) DeleteByID(ctx context.Context, id int64, isHardDelete bool, vid int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id, isHardDelete, vid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockRoleInterfaceMockRecorder) DeleteByID(ctx, id, isHardDelete, vid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockRoleInterface)(nil).DeleteByID), ctx, id, isHardDelete, vid)
}

// GetByID mocks base method.
func (m *MockRoleInterface) GetByID(ctx context.Context, cacheControl string, id int64) (model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, cacheControl, id)
	ret0, _ := ret[0].(model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockRoleInterfaceMockRecorder) GetByID(ctx, cacheControl, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRoleInterface)(nil).GetByID), ctx, cacheControl, id)
}

// GetByParam mocks base method.
func (m *MockRoleInterface) GetByParam(ctx context.Context, cacheControl string, v model.GetRolesByParam) ([]model.Role, model.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByParam", ctx, cacheControl, v)
	ret0, _ := ret[0].([]model.Role)
	ret1, _ := ret[1].(model.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByParam indicates an expected call of GetByParam.
func (mr *MockRoleInterfaceMockRecorder) GetByParam(ctx, cacheControl, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByParam", reflect.TypeOf((*MockRoleInterface)(nil).GetByParam), ctx, cacheControl, v)
}

// UpdateByID mocks base method.
func (m *MockRoleInterface) UpdateByID(ctx context.Context, id int64, v model.UpdateRole) (model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, v)
	ret0, _ := ret[0].(model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockRoleInterfaceMockRecorder) UpdateByID(ctx, id, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockRoleInterface)(nil).UpdateByID), ctx, id, v)
}
